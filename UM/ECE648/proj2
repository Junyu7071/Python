class RBFNet(object):
    """Implementation of a Radial Basis Function Network"""
    def __init__(self, x, t, lr=0.01, epochs=100, ncenter = None):
        self.x = x
        self.t = t
        self.n = data.shape[0] # number of samples
        self.ncl = t.shape[1] # number of class
        self.lr = lr # learning rate
        self.epochs = epochs
        
        # number of hidden neurons
        if center is None:
            self.ncenter = self.n
        else:
            self.ncenter = ncenter
        
        self.center = self.x[0:self.ncenter, :]
        
        # initial weights
        self.w = [1/self.ncenter] * np.ones((self.ncenter, self.ncl))
    
    def fit(self):
        for p in range(n):
            phi = np.ones(ncenter)
            for j in range(ncenter):
                phi[j] = np.exp( - 0.5 * np.sum(np.square(trainx[p, :] - center[j, :])) )
            y = np.dot(phi, w)
            sigma =  y * (1-y) * (traint[p,:] - y)
            w = w + lr * np.dot(phi.reshape(100,1), sigma.reshape(1,2))
